const fs = require("fs");
const path = require("path");
const { chromium } = require("playwright");
// const { analyzeSentiment } = require("../utils/sentiment");
const STORAGE_STATE_PATH = "./sessions/storageStateTwitter.json";

let cachedStorageState = null;

async function loginAndCacheSession(browser) {
  console.log("‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÄ‡∏û‡∏∑‡πà‡∏≠ login Twitter...");
  const context = await browser.newContext();
  const page = await context.newPage();

  try {
    await page.goto("https://x.com/login", { waitUntil: "networkidle" });
    console.log("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏ô browser ‡∏ô‡∏µ‡πâ...");
    console.log("‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Home feed...");

    // ‡∏£‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡πÜ selector ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    await Promise.race([
      // ‡∏£‡∏≠ home feed
      page.waitForSelector('[data-testid="primaryColumn"]', { timeout: 0 }),
      // ‡∏£‡∏≠ navigation bar
      page.waitForSelector('nav[aria-label="Primary"]', { timeout: 0 }),
      // ‡∏£‡∏≠ URL ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      page.waitForURL(/https:\/\/(x|twitter)\.com\/(home|$)/, { timeout: 0 }),
      // ‡∏£‡∏≠ timeline
      page.waitForSelector('[data-testid="tweet"]', { timeout: 0 }),
      // ‡∏£‡∏≠ compose button
      page.waitForSelector('[data-testid="SideNav_NewTweet_Button"]', {
        timeout: 0,
      }),
    ]);

    console.log("‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤ home ‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...");
    // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await page.waitForTimeout(5000);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡πÜ
    const isLoggedIn = await page.evaluate(() => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ element ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß
      const indicators = [
        document.querySelector(
          '[data-testid="SideNav_AccountSwitcher_Button"]'
        ),
        document.querySelector('[data-testid="AppTabBar_Profile_Link"]'),
        document.querySelector('[aria-label="Profile"]'),
        document.querySelector('[data-testid="SideNav_NewTweet_Button"]'),
        document.querySelector('[data-testid="primaryColumn"]'),
      ];

      return indicators.some((el) => el !== null);
    });

    if (!isLoggedIn) {
      throw new Error(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ login ‡πÑ‡∏î‡πâ - ‡πÑ‡∏°‡πà‡∏û‡∏ö element ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß"
      );
    }

    console.log("‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session...");

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å storage state
    cachedStorageState = await context.storageState();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    const sessionDir = path.dirname(STORAGE_STATE_PATH);
    if (!fs.existsSync(sessionDir)) {
      fs.mkdirSync(sessionDir, { recursive: true });
      console.log(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: ${sessionDir}`);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    fs.writeFileSync(
      STORAGE_STATE_PATH,
      JSON.stringify(cachedStorageState, null, 2)
    );

    console.log("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    console.log(`‡∏ü‡∏•‡πå: ${STORAGE_STATE_PATH}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
    if (fs.existsSync(STORAGE_STATE_PATH)) {
      const fileSize = fs.statSync(STORAGE_STATE_PATH).size;
      console.log(`‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: ${fileSize} bytes`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cookies
      if (cachedStorageState.cookies && cachedStorageState.cookies.length > 0) {
        console.log(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô cookies: ${cachedStorageState.cookies.length}`);
      } else {
        console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö cookies ‡πÉ‡∏ô session");
      }
    } else {
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå session ‡πÑ‡∏î‡πâ");
    }
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ login:", error.message);
    throw error;
  } finally {
    await context.close();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
async function validateSession(page) {
  try {
    await page.goto("https://x.com/home", { waitUntil: "networkidle" });

    // ‡∏£‡∏≠ element ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß
    await page.waitForSelector('[data-testid="primaryColumn"]', {
      timeout: 5000,
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const needRelogin = await page.evaluate(() => {
      return (
        window.location.pathname.includes("/login") ||
        window.location.pathname.includes("/i/flow/login") ||
        window.location.pathname.includes("/i/flow/signup")
      );
    });

    return !needRelogin;
  } catch (error) {
    console.log("Session validation failed:", error.message);
    return false;
  }
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô searchTwitter ‡πÉ‡∏´‡πâ handle session ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
async function searchTwitter(keyword, limit = 10, sinceDate, untilDate) {
  const browser = await chromium.launch({
    headless: process.env.NODE_ENV === "production",
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  try {
    // ‡πÇ‡∏´‡∏•‡∏î session ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    if (!cachedStorageState && fs.existsSync(STORAGE_STATE_PATH)) {
      try {
        const sessionData = fs.readFileSync(STORAGE_STATE_PATH, "utf-8");
        cachedStorageState = JSON.parse(sessionData);
        console.log("‡πÇ‡∏´‡∏•‡∏î session ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } catch (error) {
        console.log("‡πÑ‡∏ü‡∏•‡πå session ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...");
        if (fs.existsSync(STORAGE_STATE_PATH)) {
          fs.unlinkSync(STORAGE_STATE_PATH);
        }
        cachedStorageState = null;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡πÉ‡∏´‡πâ login ‡πÉ‡∏´‡∏°‡πà
    if (!cachedStorageState) {
      console.log("üîë ‡πÑ‡∏°‡πà‡∏û‡∏ö session ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á login ‡πÉ‡∏´‡∏°‡πà...");
      await loginAndCacheSession(browser);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏î‡πâ‡∏ß‡∏¢ session
    const context = await browser.newContext({
      storageState: cachedStorageState,
    });
    const page = await context.newPage();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà
    const isSessionValid = await validateSession(page);

    if (!isSessionValid) {
      console.log("üîÑ Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á login ‡πÉ‡∏´‡∏°‡πà...");
      await context.close();
      cachedStorageState = null;

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå session ‡πÄ‡∏Å‡πà‡∏≤
      if (fs.existsSync(STORAGE_STATE_PATH)) {
        fs.unlinkSync(STORAGE_STATE_PATH);
      }

      await loginAndCacheSession(browser);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ session ‡πÉ‡∏´‡∏°‡πà
      const newContext = await browser.newContext({
        storageState: cachedStorageState,
      });
      const newPage = await newContext.newPage();

      // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡πà‡∏≠...
      const results = await performSearch(
        newPage,
        keyword,
        limit,
        sinceDate,
        untilDate
      );
      await newContext.close();
      return results;
    }

    // ‡∏ñ‡πâ‡∏≤ session ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const results = await performSearch(
      page,
      keyword,
      limit,
      sinceDate,
      untilDate
    );
    await context.close();
    return results;
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// ‡πÅ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
async function performSearch(page, keyword, limit, sinceDate, untilDate) {
  console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${keyword}`);

  let query = keyword;
  if (sinceDate) query += ` since:${sinceDate}`;
  if (untilDate) query += ` until:${untilDate}`;

  const searchUrl = `https://x.com/search?q=${encodeURIComponent(
    query
  )}&f=live`;
  await page.goto(searchUrl, { waitUntil: "networkidle" });

  try {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ tweet ‡πÇ‡∏´‡∏•‡∏î
    await page.waitForSelector('article div[data-testid="tweetText"]', {
      timeout: 15000,
    });
  } catch (error) {
    console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö tweet ‡∏´‡∏£‡∏∑‡∏≠ selector ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô");
    // ‡∏•‡∏≠‡∏á‡∏£‡∏≠ selector ‡∏≠‡∏∑‡πà‡∏ô
    await page.waitForSelector("article", { timeout: 10000 });
  }

  const results = [];
  let lastHeight = 0;
  let idCounter = 1;
  let scrollAttempts = 0;
  const maxScrollAttempts = 10;

  console.log(`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${limit} posts`);

  while (results.length < limit && scrollAttempts < maxScrollAttempts) {
    const tweets = await page.$$("article");
    console.log(`‡∏û‡∏ö ${tweets.length} articles ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤`);

    for (const tweet of tweets) {
      if (results.length >= limit) break;

      try {
        const username = await tweet
          .$eval('div[dir="ltr"] > span', (el) => el.innerText)
          .catch(() =>
            tweet
              .$eval('[data-testid="User-Name"] span', (el) => el.innerText)
              .catch(() => "unknown")
          );

        const caption = await tweet
          .$eval('div[data-testid="tweetText"]', (el) => el.innerText)
          .catch(() => "unknown");

        const postUrl = await tweet
          .$eval('a[role="link"][href*="/status/"]', (a) => a.href)
          .catch(() => "unknown");

        if (caption !== "unknown" && postUrl !== "unknown") {
          if (!results.some((r) => r.postUrl === postUrl)) {
            results.push({
              id: idCounter++,
              username,
              caption,
              postUrl,
            });
            console.log(`‡πÄ‡∏û‡∏¥‡πà‡∏° tweet ${results.length}/${limit}`);
          }
        }
      } catch (error) {
        console.log("‡∏Ç‡πâ‡∏≤‡∏° tweet ‡∏ó‡∏µ‡πà parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", error.message);
      }
    }

    // Scroll down
    lastHeight = await page.evaluate("document.body.scrollHeight");
    await page.evaluate("window.scrollTo(0, document.body.scrollHeight)");
    await page.waitForTimeout(3000); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î

    const newHeight = await page.evaluate("document.body.scrollHeight");
    if (newHeight === lastHeight) {
      scrollAttempts++;
      console.log(`‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà (${scrollAttempts}/${maxScrollAttempts})`);
    } else {
      scrollAttempts = 0; // reset counter
    }
  }

  console.log(`‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡πÑ‡∏î‡πâ ${results.length} tweets`);
  return results.slice(0, limit);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API handler
async function handleSearch(req, res) {
  const { q, limit, since, until } = req.query;

  if (!q) {
    return res.status(400).json({
      error: "Missing ?q=keyword",
      usage: "GET /search?q=keyword&limit=10&since=2024-01-01&until=2024-12-31",
    });
  }

  try {
    console.log(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ${q}`);
    const numLimit = limit ? parseInt(limit) : 10;
    const results = await searchTwitter(q, numLimit, since, until);

    res.json({
      success: true,
      query: q,
      limit: numLimit,
      found: results.length,
      results,
    });
  } catch (err) {
    console.error("Search error:", err);
    res.status(500).json({
      error: "Search failed",
      message: err.message,
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö session (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
function clearSession() {
  if (fs.existsSync(STORAGE_STATE_PATH)) {
    fs.unlinkSync(STORAGE_STATE_PATH);
    console.log("‡∏•‡∏ö session file ‡πÅ‡∏•‡πâ‡∏ß");
  }
  cachedStorageState = null;
  console.log("‡∏•‡πâ‡∏≤‡∏á cached session ‡πÅ‡∏•‡πâ‡∏ß");
}

module.exports = {
  handleSearch,
  searchTwitter,
  clearSession,
  loginAndCacheSession,
};
